package com.dzung.torre.genome.object;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class GenomeApiObj {
	
	private Person person;

	@Override
	public String toString() {
		return "Genome [person=" + person.toString() + "]";
	}
	
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	private class Person {
		
		private String professionalHeadline;
		private String completion;
		private boolean showPhone;
		private String created;
		private boolean verified;
		private Flags flags;
		private Long weight;
		private String locale;
		private Integer subjectId;
		private String picture;
		private boolean hasEmail;
		private boolean isTest;
		private String name;
		private Links links;
		//private Location location;
		private String theme;
		private String id;
		private String pictureThumbnail;
		private boolean claimant;
		private String summaryOfBio;
		private String weightGraph;
		private String publicId;
		
		
		@Data
		@AllArgsConstructor
		@NoArgsConstructor
		private class Flags {
			
			private boolean benefits;
			private boolean canary;
			private boolean enlauSource;
			private boolean fake;
			private boolean featureDiscovery;
			private boolean getSignaledBenefitsViewed;
			private boolean firstSignalSent;
			private boolean signalsOnboardingCompleted;
			private boolean importingLinkedin;
			private boolean onBoarded;
			private boolean remoter;
			private boolean signalsFeatureDiscovery;
			private boolean importingLinkedinRecommendations;
			private boolean contactsImported;
			private boolean appContactsImported;
			private boolean genomeCompletionAcknowledged;
			
			@Override
			public String toString() {
				return "Flags [benefits=" + benefits + ", canary=" + canary + ", enlauSource=" + enlauSource + ", fake="
						+ fake + ", featureDiscovery=" + featureDiscovery + ", getSignaledBenefitsViewed="
						+ getSignaledBenefitsViewed + ", firstSignalSent=" + firstSignalSent
						+ ", signalsOnboardingCompleted=" + signalsOnboardingCompleted + ", importingLinkedin="
						+ importingLinkedin + ", onBoarded=" + onBoarded + ", remoter=" + remoter
						+ ", signalsFeatureDiscovery=" + signalsFeatureDiscovery + ", importingLinkedinRecommendations="
						+ importingLinkedinRecommendations + ", contactsImported=" + contactsImported
						+ ", appContactsImported=" + appContactsImported + ", genomeCompletionAcknowledged="
						+ genomeCompletionAcknowledged + "]";
			}
						
		}
		
		@Data
		@AllArgsConstructor
		@NoArgsConstructor
		private class Links {
			
			private String id;
			private String name;
			private String address;
			@Override
			public String toString() {
				return "Links [id=" + id + ", name=" + name + ", address=" + address + "]";
			}
			
			
		}

		@Data
		@AllArgsConstructor
		@NoArgsConstructor
		private class Location {
			
			private String name;
			@Override
			public String toString() {
				return "";
			}
			
			
		}

		@Override
		public String toString() {
			return "Person [professionalHeadline=" + professionalHeadline + ", completion=" + completion
					+ ", showPhone=" + showPhone + ", created=" + created + ", verified=" + verified + ", flags="
					+ flags.toString() + ", weight=" + weight + ", locale=" + locale + ", subjectId=" + subjectId + ", picture="
					+ picture + ", hasEmail=" + hasEmail + ", isTest=" + isTest + ", name=" + name + ", links=" + links
					+ ", location="  + ", theme=" + theme + ", id=" + id + ", pictureThumbnail="
					+ pictureThumbnail + ", claimant=" + claimant + ", summaryOfBio=" + summaryOfBio + ", weightGraph="
					+ weightGraph + ", publicId=" + publicId + "]";
		}
	}
}
