package com.dzung.torre.genome.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.dzung.torre.genome.object.GenomeApiObj;
import com.dzung.torre.genome.object.PeopleRequest;
import com.dzung.torre.genome.properties.TorreProperties;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class PeopleService {

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private TorreProperties torreProperties;
	
	public GenomeApiObj findPeople(PeopleRequest peopleRequest) {
		GenomeApiObj retGenome = null;
		
		String apiUrl = torreProperties.getPeopleSearchApiUrl();
		log.info("[findPeople] find people by calling API {}", apiUrl);
		
		try {
			if(this.validateSearchCriteria(peopleRequest)) {
				//call Torre API
				retGenome = 
						restTemplate.getForObject(apiUrl + "?" 
								+ "offset=" + peopleRequest.getOffset()
								+ "size=" + peopleRequest.getSize()
								+ "aggregate=" + peopleRequest.isAggregate(), 
								GenomeApiObj.class);
				//
				log.info("API Result: " + retGenome.toString());
			}
		}
		catch(Exception ex) {
			log.error("Exception: {}", ex.getMessage());
		}
				
		
		return retGenome;
	}

	/*
	 *  search criteria validation
	 */
	private boolean validateSearchCriteria(PeopleRequest peopleRequest) {
		boolean ret = true;
		
		try {
			//check username empty or null
			if(peopleRequest.getOffset()<0) {
				ret = false; 
			}
			else if(peopleRequest.getSize()<0) {
				ret = false; 
			}
		}
		catch(Exception ex) {
			log.error("Exception: {}", ex.getMessage());
		}
		finally{
			log.info("[validateSearchCriteria] result = ", ret);
			
		}
		
		return ret;
	}
}
